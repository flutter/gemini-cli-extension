# Copyright 2025 The Flutter Authors.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This command will be invoked via: /flutter:refactor

description = "Prepares the model to refactor code."

prompt = """
We're going to refactor some code.

## Problem specification

First, prompt the user for a description of the refactor's purpose, what the user wants done, and whether it should be done on a new branch.

If there are ambiguous elements, ask the user questions to clarify. When the goal is clear, or the user says to, then move on to initializing the workspace.

## Initialize workspace

First, make sure there are no uncommitted changes on the current branch. If there are, notify the user and ask what they would like to do about them.

If the work is to be done on a new branch, then create a new refactor branch based on the current branch, giving the branch an appropriate name if the user didn't specify one.

## Refactor design document

Develop a **DETAILED** Markdown-formatted design document that follows all of the guidance you have about Dart design patterns, rules, best practices, and core principles. Save the implementation plan in REFACTOR.md in the top directory of the workspace. Feel free to use your available tools to research any aspects of the refactor that are unclear.

The design doc should (at least) include:

- An overview
- A detailed analysis of the goal or problem
- Alternatives considered
- A detailed design for the refactor
- Any diagrams needed to explain the refactor or the design (in Mermaid format)
- A summary of the design
- References to research URLs used to arrive at the design.

Have the user review this design document and approve it before moving on.

## Implementation plan

Develop a **DETAILED** Markdown-formatted phased implementation plan of checkboxed tasks that need to be performed in order to finish the refactor. Save the implementation plan in REFACTOR_IMPLEMENTATION.md in the top of the repo.

The implementation plan should include a section for the "Journal" which is to be updated after each phase, including checking off completed checklist items. The checklist should be updated before committing the code for the completed phase.

The plan must include instructions similar to: "After completing a task, if you added any TODOs to the code or didn't fully implement anything, make sure to add new tasks so that you can come back and complete them later." to prevent leaving tasks unfinished.

The plan must include updating any existing tests, creating new ones if needed, and ensuring that all tests pass before the plan is complete.

The plan must also include instructions for updating any documentation that changed as a result of the refactor.

The implementation plan should specify this checklist after each phase:

- [ ] Run the dart_fix and dart_format tools to clean up the code.
- [ ] Run the analyze_files tool one more time and fix any issues.
- [ ] Run any tests to make sure they all pass.
- [ ] Run dart_format one more time to make sure that the formatting is still correct if you made any changes during the analysis and testing steps.
- [ ] Re-read the REFACTOR_IMPLEMENTATION.md file to see what, if anything, has changed in the implementation plan, and if it has changed, take care of anything the changes imply.
- [ ] Update the REFACTOR_IMPLEMENTATION.md file with the current state, including any learnings, surprises, or deviations in the Journal section.
- [ ] Use `git diff` to verify the changes that have been made, and create a suitable commit message for any changes, following any guidelines you have about commit messages. Be sure to properly escape dollar signs and backticks, and present the change message to the user for approval.
- [ ] Wait for approval. Don't commit the changes or move on to the next phase of implementation until the user approves the commit.

Have the user review this implementation plan and approve it before starting implementation.
"""
